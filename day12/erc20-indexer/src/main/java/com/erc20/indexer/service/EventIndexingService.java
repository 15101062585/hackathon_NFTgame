package com.erc20.indexer.service;

import com.erc20.indexer.entity.Token;
import com.erc20.indexer.entity.TokenTransfer;
import com.erc20.indexer.repository.TokenRepository;
import com.erc20.indexer.repository.TokenTransferRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.methods.response.EthBlock;
import org.web3j.protocol.core.methods.response.EthLog;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.Transaction;
import com.erc20.indexer.service.TokenService;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;

@Service
public class EventIndexingService {

    private static final Logger log = LoggerFactory.getLogger(EventIndexingService.class);
    
    private final Web3j web3j;
    private final TokenRepository tokenRepository;
    private final TokenTransferRepository transferRepository;
    private final TokenService tokenService;
    
    @Value("${web3j.enabled:true}")
    private boolean web3jEnabled;
    
    @Value("${indexer.contract-address}")
    private String contractAddress;
    
    @Value("${indexer.poll-interval}")
    private long POLL_INTERVAL;

    @Value("${indexer.time-window}")
    private long TIME_WINDOW;

    // Êó∂Èó¥Á™óÂè£ËΩÆËØ¢Áõ∏ÂÖ≥Â≠óÊÆµ
    private volatile long lastPollTime = 0;
    private volatile BigInteger lastPollBlock = BigInteger.ZERO;
    private ScheduledExecutorService scheduler;
    private volatile boolean isRunning = true;
    private boolean isInitialized = false;
    
    private final ConcurrentHashMap<String, Boolean> processingTransactions = new ConcurrentHashMap<>();

    // ÂÆö‰πâ Transfer ‰∫ã‰ª∂
    private static final Event TRANSFER_EVENT = new Event(
        "Transfer",
        Arrays.asList(
            new TypeReference<Address>(true) {}, // from (indexed)
            new TypeReference<Address>(true) {}, // to (indexed)
            new TypeReference<Uint256>() {}     // value
        )
    );
    
    public EventIndexingService(Web3j web3j, 
                              TokenRepository tokenRepository,
                              TokenTransferRepository transferRepository, 
                              TokenService tokenService) {
        this.web3j = web3j;
        this.tokenRepository = tokenRepository;
        this.transferRepository = transferRepository;
        this.tokenService = tokenService;
    }
    
    @PostConstruct
    public void init() {
        if (web3jEnabled) {
            log.info("üåê ÂêØÂä®Êó∂Èó¥Á™óÂè£Âå∫ÂùóÈìæ‰∫ã‰ª∂ÁõëÂê¨");
            testBlockchainConnection();
            startTimeWindowPolling(); // ‰ΩøÁî®Êó∂Èó¥Á™óÂè£ËΩÆËØ¢
        } else {
            log.warn("üîå Âå∫ÂùóÈìæËøûÊé•Â∑≤Á¶ÅÁî®");
        }
    }
    
    @PreDestroy
    public void cleanup() {
        isRunning = false;
        if (scheduler != null && !scheduler.isShutdown()) {
            scheduler.shutdown();
            try {
                if (!scheduler.awaitTermination(5, TimeUnit.SECONDS)) {
                    scheduler.shutdownNow();
                }
            } catch (InterruptedException e) {
                scheduler.shutdownNow();
                Thread.currentThread().interrupt();
            }
        }
        log.info("üîö Âå∫ÂùóÈìæÁõëÂê¨Â∑≤ÂÅúÊ≠¢");
    }
    
    private void testBlockchainConnection() {
        try {
            log.info("üîç ÊµãËØïÂå∫ÂùóÈìæËøûÊé•...");
            String clientVersion = web3j.web3ClientVersion().send().getWeb3ClientVersion();
            BigInteger blockNumber = web3j.ethBlockNumber().send().getBlockNumber();
            
            log.info("‚úÖ Âå∫ÂùóÈìæËøûÊé•ÊàêÂäü!");
            log.info("ÂÆ¢Êà∑Á´ØÁâàÊú¨: {}", clientVersion);
            log.info("ÂΩìÂâçÂå∫ÂùóÈ´òÂ∫¶: {}", blockNumber);
            
            isInitialized = true;
            
        } catch (Exception e) {
            log.error("‚ùå Âå∫ÂùóÈìæËøûÊé•ÊµãËØïÂ§±Ë¥•: {}", e.getMessage());
            throw new RuntimeException("Âå∫ÂùóÈìæËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúÈÖçÁΩÆ", e);
        }
    }
    
    /**
     * ÂêØÂä®Êó∂Èó¥Á™óÂè£ËΩÆËØ¢
     */
    private void startTimeWindowPolling() {
        log.info("‚è∞ ÂêØÂä®Êó∂Èó¥Á™óÂè£ËΩÆËØ¢ÔºåÈó¥Èöî: {}Áßí, Á™óÂè£: {}ÂàÜÈíü", 
                POLL_INTERVAL / 1000, TIME_WINDOW / 1000 / 60);
        
        scheduler = Executors.newSingleThreadScheduledExecutor();
        scheduler.scheduleAtFixedRate(this::timeWindowPoll, 0, POLL_INTERVAL, TimeUnit.MILLISECONDS);
    }
    
    /**
     * Êó∂Èó¥Á™óÂè£ËΩÆËØ¢ÊñπÊ≥ï
     */
    @Async
    public void timeWindowPoll() {
        if (!isInitialized || !web3jEnabled || !isRunning) {
            return;
        }
        
        try {
            long currentTime = System.currentTimeMillis();
            
            // Â¶ÇÊûúÊòØÁ¨¨‰∏ÄÊ¨°ËΩÆËØ¢ÔºåÂàùÂßãÂåñÊó∂Èó¥Á™óÂè£
            if (lastPollTime == 0) {
                initializeTimeWindow();
                lastPollTime = currentTime;
                return;
            }
            
            // ËÆ°ÁÆóÊó∂Èó¥Á™óÂè£ÔºàÊúÄËøë2ÂàÜÈíüÔºâ
            long windowStartTime = currentTime - TIME_WINDOW;
            
            // ÊâæÂà∞Êó∂Èó¥Á™óÂè£ÂØπÂ∫îÁöÑÂå∫ÂùóËåÉÂõ¥
            BlockRange blockRange = findBlocksByTimeWindow(windowStartTime, currentTime);
            
            if (blockRange.fromBlock.compareTo(blockRange.toBlock) >= 0) {
                log.debug("‚è≠Ô∏è Ê≤°ÊúâÊñ∞Âå∫ÂùóÈúÄË¶ÅÂ§ÑÁêÜ");
                lastPollTime = currentTime;
                return;
            }
            
            log.info("üïê Êó∂Èó¥Á™óÂè£Êü•ËØ¢: {} - {} (Âå∫Âùó {} - {})", 
                    formatTime(windowStartTime), formatTime(currentTime),
                    blockRange.fromBlock, blockRange.toBlock);
            
            // Â§ÑÁêÜËøô‰∏™Êó∂Èó¥Á™óÂè£ÂÜÖÁöÑÂå∫Âùó
            processBlockRange(blockRange.fromBlock, blockRange.toBlock);
            
            lastPollTime = currentTime;
            lastPollBlock = blockRange.toBlock;
            
        } catch (Exception e) {
            log.error("‚è∞ Êó∂Èó¥Á™óÂè£ËΩÆËØ¢Â§±Ë¥•: {}", e.getMessage());
        }
    }
    
    /**
     * ÂàùÂßãÂåñÊó∂Èó¥Á™óÂè£
     */
    private void initializeTimeWindow() {
        try {
            // ‰ªéÊï∞ÊçÆÂ∫ìËé∑ÂèñÊúÄÂêéÂ§ÑÁêÜÁöÑÊó∂Èó¥
            Long lastTimestamp = transferRepository.findMaxTimestamp();
            if (lastTimestamp != null && lastTimestamp > 0) {
                // ‰ªéÊúÄÂêéÂ§ÑÁêÜÁöÑÊó∂Èó¥ÂºÄÂßãÔºåÂä†1ÁßíÈÅøÂÖçÈáçÂ§ç
                long startTime = lastTimestamp * 1000 + 1000;
                long currentTime = System.currentTimeMillis();
                
                // Á°Æ‰øùÊó∂Èó¥Á™óÂè£‰∏çË∂ÖËøáÂΩìÂâçÊó∂Èó¥
                startTime = Math.min(startTime, currentTime);
                
                lastPollTime = startTime;
                log.info("üìö ‰ªéÊï∞ÊçÆÂ∫ìÊÅ¢Â§çÊó∂Èó¥Á™óÂè£ÔºåÊúÄÂêéÊó∂Èó¥: {}", formatTime(startTime));
            } else {
                // Á¨¨‰∏ÄÊ¨°ÂêØÂä®Ôºå‰ªéÂΩìÂâçÊó∂Èó¥ÂæÄÂâçÊé®Êó∂Èó¥Á™óÂè£
                lastPollTime = System.currentTimeMillis() - TIME_WINDOW;
                log.info("üÜï È¶ñÊ¨°ÂêØÂä®Êó∂Èó¥Á™óÂè£Ôºå‰ªé {} ÂºÄÂßã", formatTime(lastPollTime));
            }
            
        } catch (Exception e) {
            log.error("ÂàùÂßãÂåñÊó∂Èó¥Á™óÂè£Â§±Ë¥•: {}", e.getMessage());
            // ÈªòËÆ§‰ªé10ÂàÜÈíüÂâçÂºÄÂßã
            lastPollTime = System.currentTimeMillis() - (10 * 60 * 1000);
        }
    }
    
    /**
     * Ê†πÊçÆÊó∂Èó¥Á™óÂè£Êü•ÊâæÂØπÂ∫îÁöÑÂå∫ÂùóËåÉÂõ¥
     */
    private BlockRange findBlocksByTimeWindow(long fromTime, long toTime) {
        try {
            // Â∞ÜÊó∂Èó¥ËΩ¨Êç¢‰∏∫ÁßíÔºàÂå∫ÂùóÈìæÊó∂Èó¥Êà≥Âçï‰ΩçÔºâ
            long fromTimestamp = fromTime / 1000;
            long toTimestamp = toTime / 1000;
            
            // Ëé∑ÂèñÊúÄÊñ∞Âå∫Âùó
            BigInteger latestBlockNum = web3j.ethBlockNumber().send().getBlockNumber();
            EthBlock.Block latestBlock = web3j.ethGetBlockByNumber(
                DefaultBlockParameter.valueOf(latestBlockNum), false).send().getBlock();
            
            if (latestBlock == null) {
                log.error("Ëé∑ÂèñÊúÄÊñ∞Âå∫ÂùóÂ§±Ë¥•");
                return new BlockRange(BigInteger.ZERO, BigInteger.ZERO);
            }
            
            long latestBlockTime = latestBlock.getTimestamp().longValue();
            
            // Â¶ÇÊûúÁõÆÊ†áÊó∂Èó¥Êôö‰∫éÊúÄÊñ∞Âå∫ÂùóÊó∂Èó¥Ôºå‰ΩøÁî®ÊúÄÊñ∞Âå∫Âùó
            if (toTimestamp > latestBlockTime) {
                toTimestamp = latestBlockTime;
            }
            
            // Êü•ÊâæËµ∑ÂßãÂå∫Âùó
            BigInteger fromBlock = findBlockByTimestamp(fromTimestamp, BigInteger.ONE, latestBlockNum);
            BigInteger toBlock = findBlockByTimestamp(toTimestamp, fromBlock, latestBlockNum);
            
            log.debug("Êó∂Èó¥Á™óÂè£Êò†Â∞Ñ: {}s-{}s -> Âå∫Âùó {}-{}", fromTimestamp, toTimestamp, fromBlock, toBlock);
            
            return new BlockRange(fromBlock, toBlock);
            
        } catch (Exception e) {
            log.error("Êü•ÊâæÊó∂Èó¥Á™óÂè£Âå∫ÂùóÂ§±Ë¥•: {}", e.getMessage());
            // Â§±Ë¥•Êó∂ËøîÂõûÁ©∫ËåÉÂõ¥
            return new BlockRange(BigInteger.ZERO, BigInteger.ZERO);
        }
    }
    
    /**
     * ‰∫åÂàÜÊü•ÊâæÊâæÂà∞ÊåáÂÆöÊó∂Èó¥Êà≥ÂØπÂ∫îÁöÑÂå∫Âùó
     */
    private BigInteger findBlockByTimestamp(long targetTimestamp, BigInteger low, BigInteger high) {
        try {
            // ÁÆÄÂåñÂÆûÁé∞Ôºö‰ªéÊúÄÊñ∞Âå∫ÂùóÂæÄÂâçÊü•Êâæ
            BigInteger current = high;
            int maxSteps = 100; // ÊúÄÂ§öÊü•Êâæ100Ê≠•
            
            for (int i = 0; i < maxSteps && current.compareTo(low) >= 0; i++) {
                EthBlock.Block block = web3j.ethGetBlockByNumber(
                    DefaultBlockParameter.valueOf(current), false).send().getBlock();
                
                if (block != null) {
                    long blockTime = block.getTimestamp().longValue();
                    
                    if (blockTime <= targetTimestamp) {
                        // ÊâæÂà∞Á¨¨‰∏Ä‰∏™Êó∂Èó¥Êà≥Â∞è‰∫éÁ≠â‰∫éÁõÆÊ†áÊó∂Èó¥ÁöÑÂå∫Âùó
                        log.debug("ÊâæÂà∞Âå∫Âùó {} Êó∂Èó¥ {} <= ÁõÆÊ†áÊó∂Èó¥ {}", current, blockTime, targetTimestamp);
                        return current;
                    }
                }
                
                current = current.subtract(BigInteger.ONE);
            }
            
            // Â¶ÇÊûúÊ≤°ÊâæÂà∞ÔºåËøîÂõûÊúÄ‰ΩéÂå∫Âùó
            log.debug("Êú™ÊâæÂà∞ÂêàÈÄÇÂå∫ÂùóÔºåËøîÂõûÊúÄ‰ΩéÂå∫Âùó: {}", low);
            return low;
            
        } catch (Exception e) {
            log.error("‰∫åÂàÜÊü•ÊâæÂå∫ÂùóÂ§±Ë¥•: {}", e.getMessage());
            return low;
        }
    }
    
    /**
     * ‰ºòÂåñÁöÑÂå∫ÂùóËåÉÂõ¥Â§ÑÁêÜÔºàÈÅøÂÖçÂ§ßËåÉÂõ¥Êü•ËØ¢Ôºâ
     */
    private void processBlockRange(BigInteger fromBlock, BigInteger toBlock) {
        if (fromBlock.compareTo(toBlock) >= 0) {
            log.debug("‚è≠Ô∏è Âå∫ÂùóËåÉÂõ¥Êó†Êïà: {} - {}", fromBlock, toBlock);
            return;
        }
        
        try {
            long blockCount = toBlock.subtract(fromBlock).longValue();
            
            // Â¶ÇÊûúÂå∫ÂùóËåÉÂõ¥Â§™Â§ßÔºåÂàÜÊàêÂ∞èÊâπÊ¨°Â§ÑÁêÜ
            if (blockCount > 100) {
                log.info("üì¶ Â§ßËåÉÂõ¥Âå∫ÂùóÂàÜÂâ≤Â§ÑÁêÜ: {} ‰∏™Âå∫Âùó", blockCount);
                processLargeBlockRange(fromBlock, toBlock);
            } else {
                processSingleBlockRange(fromBlock, toBlock);
            }
            
        } catch (Exception e) {
            log.error("Â§ÑÁêÜÂå∫ÂùóËåÉÂõ¥Â§±Ë¥•: {} - {}: {}", fromBlock, toBlock, e.getMessage());
        }
    }
    
    /**
     * Â§ÑÁêÜÂ§ßËåÉÂõ¥Âå∫ÂùóÔºàÂàÜÂâ≤ÊàêÂ∞èÊâπÊ¨°Ôºâ
     */
    private void processLargeBlockRange(BigInteger fromBlock, BigInteger toBlock) {
        BigInteger batchSize = BigInteger.valueOf(50);
        BigInteger current = fromBlock;
        int batchCount = 0;
        
        while (current.compareTo(toBlock) < 0) {
            BigInteger batchEnd = current.add(batchSize).min(toBlock);
            
            log.debug("Â§ÑÁêÜÊâπÊ¨° {}: {} - {}", ++batchCount, current, batchEnd);
            processSingleBlockRange(current, batchEnd);
            
            current = batchEnd.add(BigInteger.ONE);
            
            // Â∞èÂª∂ËøüÈÅøÂÖçËøáËΩΩ
            if (current.compareTo(toBlock) < 0) {
                try {
                    Thread.sleep(200);
                } catch (InterruptedException e) {
                    Thread.currentThread().interrupt();
                    break;
                }
            }
        }
        
        log.info("‚úÖ Â§ßËåÉÂõ¥Â§ÑÁêÜÂÆåÊàê: {} ‰∏™ÊâπÊ¨°", batchCount);
    }
    
    /**
     * Â§ÑÁêÜÂçï‰∏™Âå∫ÂùóËåÉÂõ¥
     */
    private void processSingleBlockRange(BigInteger fromBlock, BigInteger toBlock) {
        try {
            org.web3j.protocol.core.methods.request.EthFilter filter = 
                new org.web3j.protocol.core.methods.request.EthFilter(
                    DefaultBlockParameter.valueOf(fromBlock),
                    DefaultBlockParameter.valueOf(toBlock),
                    List.of(contractAddress)
                );
            filter.addSingleTopic(EventEncoder.encode(TRANSFER_EVENT));
            
            EthLog ethLog = web3j.ethGetLogs(filter).send();
            List<EthLog.LogResult> logResults = ethLog.getLogs();
            
            if (logResults != null && !logResults.isEmpty()) {
                log.info("üì• Âú®Âå∫Âùó {}-{} ‰∏≠ÊâæÂà∞ {} ‰∏™ËΩ¨Ë¥¶‰∫ã‰ª∂", fromBlock, toBlock, logResults.size());
                
                int processed = 0;
                for (EthLog.LogResult logResult : logResults) {
                    try {
                        if (logResult instanceof EthLog.LogObject) {
                            EthLog.LogObject logObject = (EthLog.LogObject) logResult;
                            processTransferLog(logObject.get());
                            processed++;
                        }
                    } catch (Exception e) {
                        log.error("Â§ÑÁêÜËΩ¨Ë¥¶‰∫ã‰ª∂Â§±Ë¥•: {}", e.getMessage());
                    }
                }
                
                log.info("‚úÖ ÊàêÂäüÂ§ÑÁêÜ {}/{} ‰∏™ËΩ¨Ë¥¶‰∫ã‰ª∂", processed, logResults.size());
            } else {
                log.debug("Âå∫Âùó {}-{} ‰∏≠Ê≤°ÊúâÊâæÂà∞ËΩ¨Ë¥¶‰∫ã‰ª∂", fromBlock, toBlock);
            }
            
        } catch (Exception e) {
            log.error("Â§ÑÁêÜÂå∫ÂùóËåÉÂõ¥ {} - {} Â§±Ë¥•: {}", fromBlock, toBlock, e.getMessage());
        }
    }
    
    @Transactional
    public void processTransferLog(Log ethLog) {
        try {
            String contractAddress = ethLog.getAddress();
            String transactionHash = ethLog.getTransactionHash();
            Integer logIndex = ethLog.getLogIndex().intValue();
            
            // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÂ§ÑÁêÜËøáËøô‰∏™Êó•Âøó
            if (transferRepository.countByTransactionHashAndLogIndex(transactionHash, logIndex) > 0) {
                log.debug("ËΩ¨Ë¥¶ËÆ∞ÂΩïÂ∑≤Â≠òÂú®ÔºåË∑≥Ëøá: {} - logIndex: {}", transactionHash, logIndex);
                return;
            }
            
            // 1. Êü•ÊâæÊàñÂàõÂª∫ Token
            Token token = tokenRepository.findByContractAddress(contractAddress)
                .orElseGet(() -> createTokenFromBlockchain(contractAddress, ethLog.getBlockNumber()));
            
            if (token == null) {
                log.error("Êó†Ê≥ïÂàõÂª∫ÊàñËé∑Âèñ Token ‰ø°ÊÅØ: {}", contractAddress);
                return;
            }
            
            // 2. Ëß£Êûê‰∫ã‰ª∂ÂèÇÊï∞
            String from = "0x" + ethLog.getTopics().get(1).substring(26);
            String to = "0x" + ethLog.getTopics().get(2).substring(26);
            
            String data = ethLog.getData();
            BigInteger value = new BigInteger(data.substring(2), 16);
            
            // 3. Ëé∑ÂèñÂå∫ÂùóÊó∂Èó¥Êà≥
            EthBlock.Block block = web3j.ethGetBlockByHash(ethLog.getBlockHash(), false).send().getBlock();
            BigInteger timestamp = block.getTimestamp();
            
            // 4. ÂàõÂª∫Âπ∂‰øùÂ≠ò Transfer ËÆ∞ÂΩï
            TokenTransfer transfer = new TokenTransfer();
            transfer.setToken(token);
            transfer.setFromAddress(from.toLowerCase());
            transfer.setToAddress(to.toLowerCase());
            transfer.setValue(new BigDecimal(value));
            transfer.setTransactionHash(transactionHash);
            transfer.setBlockNumber(ethLog.getBlockNumber().longValue());
            transfer.setTransactionIndex(ethLog.getTransactionIndex().intValue());
            transfer.setLogIndex(logIndex);
            transfer.setTimestamp(timestamp.longValue());
            transferRepository.save(transfer);
            
            log.info("üì• Â∑≤Á¥¢ÂºïËΩ¨Ë¥¶: {} {} ‰ªé {} Âà∞ {} Âå∫Âùó: {}", 
                    formatValue(value, token.getDecimals()), 
                    token.getSymbol(), 
                    shortenAddress(from), 
                    shortenAddress(to),
                    ethLog.getBlockNumber());
                    
        } catch (Exception e) {
            log.error("Ëß£Êûê Transfer Êó•ÂøóÂ§±Ë¥•: {}", e.getMessage());
        }
    }
    
    public Token createTokenFromBlockchain(String contractAddress, BigInteger deploymentBlock) {
        try {
            log.info("üÜï ÂèëÁé∞Êñ∞TokenÂêàÁ∫¶: {}", contractAddress);
            
            // ‰ªéÂå∫ÂùóÈìæËé∑ÂèñÁúüÂÆûÁöÑ‰ª£Â∏Å‰ø°ÊÅØ
            TokenService.TokenInfo tokenInfo = tokenService.getTokenInfoFromBlockchain(contractAddress);
            
            // ÂàõÂª∫ Token ÂØπË±°
            Token token = new Token();
            token.setContractAddress(contractAddress.toLowerCase());
            token.setName(tokenInfo.getName());
            token.setSymbol(tokenInfo.getSymbol());
            token.setDecimals(tokenInfo.getDecimals());
            token.setCreatedBlock(deploymentBlock.longValue());
            
            // ËΩ¨Êç¢ÊÄª‰æõÂ∫îÈáèÔºàËÄÉËôëÂ∞èÊï∞‰ΩçÔºâ
            BigDecimal totalSupply = convertToDecimal(tokenInfo.getTotalSupply(), tokenInfo.getDecimals());
            token.setTotalSupply(totalSupply);
            
            Token savedToken = tokenRepository.save(token);
            log.info("‚úÖ ÂàõÂª∫TokenËÆ∞ÂΩï: {} ({}) - ÊÄª‰æõÂ∫îÈáè: {}", 
                    tokenInfo.getName(), tokenInfo.getSymbol(), totalSupply);
            
            return savedToken;
            
        } catch (Exception e) {
            log.error("‚ùå ÂàõÂª∫ Token ËÆ∞ÂΩïÂ§±Ë¥• {}: {}", contractAddress, e.getMessage());
            return createFallbackToken(contractAddress, deploymentBlock);
        }
    }
    
    private String formatValue(BigInteger value, int decimals) {
        BigDecimal decimalValue = new BigDecimal(value);
        BigDecimal divisor = BigDecimal.TEN.pow(decimals);
        return decimalValue.divide(divisor).toPlainString();
    }
    
    private String shortenAddress(String address) {
        return address.length() > 10 ? 
            address.substring(0, 6) + "..." + address.substring(address.length() - 4) : 
            address;
    }

    private BigDecimal convertToDecimal(BigInteger value, int decimals) {
        if (value == null || value.equals(BigInteger.ZERO)) {
            return BigDecimal.ZERO;
        }
        
        BigDecimal divisor = BigDecimal.TEN.pow(decimals);
        BigDecimal rawValue = new BigDecimal(value);
        
        return rawValue.divide(divisor);
    }
    
    private Token createFallbackToken(String contractAddress, BigInteger deploymentBlock) {
        try {
            Token token = new Token();
            token.setContractAddress(contractAddress.toLowerCase());
            token.setName("Unknown Token");
            token.setSymbol("UNKNOWN");
            token.setDecimals(18);
            token.setCreatedBlock(deploymentBlock.longValue());
            token.setTotalSupply(BigDecimal.ZERO);
            
            return tokenRepository.save(token);
            
        } catch (Exception e) {
            log.error("‚ùå ËøûÂ§áÁî®TokenËÆ∞ÂΩï‰πüÂàõÂª∫Â§±Ë¥•: {}", e.getMessage());
            return null;
        }
    }
    
    /**
     * Ëé∑ÂèñÂΩìÂâçÁ¥¢ÂºïÁä∂ÊÄÅ
     */
    public String getIndexingStatus() {
        return String.format("ÊúÄÂêéËΩÆËØ¢: %s, ÊúÄÂêéÂå∫Âùó: %s, ‰ª£Â∏ÅÊï∞Èáè: %d, ËΩ¨Ë¥¶ËÆ∞ÂΩï: %d", 
                formatTime(lastPollTime), 
                lastPollBlock,
                tokenRepository.count(), 
                transferRepository.count());
    }
    
    /**
     * ÊâãÂä®Ëß¶ÂèëÂéÜÂè≤Êï∞ÊçÆÁ¥¢ÂºïÔºà‰øùÁïôÂéüÊúâÂäüËÉΩÔºâ
     */
    public void indexHistoricalTransfers(BigInteger fromBlock, BigInteger toBlock) {
        processBlockRange(fromBlock, toBlock);
    }
    
    /**
     * Ê†ºÂºèÂåñÊó∂Èó¥ÊòæÁ§∫
     */
    private String formatTime(long timestamp) {
        return new SimpleDateFormat("MM-dd HH:mm:ss").format(new java.util.Date(timestamp));
    }
    
    /**
     * Âå∫ÂùóËåÉÂõ¥ÂÜÖÈÉ®Á±ª
     */
    private static class BlockRange {
        final BigInteger fromBlock;
        final BigInteger toBlock;
        
        BlockRange(BigInteger fromBlock, BigInteger toBlock) {
            this.fromBlock = fromBlock;
            this.toBlock = toBlock;
        }
    }
}